---
source: src/parser.rs
expression: program.nodes
---
- Expression:
    BinaryExp:
      operator: Mul
      lhs:
        UnaryExpression:
          value:
            Identifier: a
          operator: Oposite
      rhs:
        Identifier: b
- Expression:
    UnaryExpression:
      value:
        UnaryExpression:
          value:
            Identifier: a
          operator: Oposite
      operator: Not
- Expression:
    BinaryExp:
      operator: Add
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Identifier: a
          rhs:
            Identifier: b
      rhs:
        Identifier: c
- Expression:
    BinaryExp:
      operator: Sub
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Identifier: a
          rhs:
            Identifier: b
      rhs:
        Identifier: c
- Expression:
    BinaryExp:
      operator: Mul
      lhs:
        BinaryExp:
          operator: Mul
          lhs:
            Identifier: a
          rhs:
            Identifier: b
      rhs:
        Identifier: c
- Expression:
    BinaryExp:
      operator: Div
      lhs:
        BinaryExp:
          operator: Mul
          lhs:
            Identifier: a
          rhs:
            Identifier: b
      rhs:
        Identifier: c
- Expression:
    BinaryExp:
      operator: Add
      lhs:
        Identifier: a
      rhs:
        BinaryExp:
          operator: Div
          lhs:
            Identifier: b
          rhs:
            Identifier: c
- Expression:
    BinaryExp:
      operator: Sub
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            BinaryExp:
              operator: Add
              lhs:
                Identifier: a
              rhs:
                BinaryExp:
                  operator: Mul
                  lhs:
                    Identifier: b
                  rhs:
                    Identifier: c
          rhs:
            BinaryExp:
              operator: Div
              lhs:
                Identifier: d
              rhs:
                Identifier: e
      rhs:
        Identifier: f
- Expression:
    BinaryExp:
      operator: Add
      lhs:
        Literal:
          Int: 3
      rhs:
        Literal:
          Int: 4
- Expression:
    BinaryExp:
      operator: Mul
      lhs:
        UnaryExpression:
          value:
            Literal:
              Int: 5
          operator: Oposite
      rhs:
        Literal:
          Int: 5
- Expression:
    BinaryExp:
      operator: Eq
      lhs:
        BinaryExp:
          operator: Gt
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 4
      rhs:
        BinaryExp:
          operator: Lt
          lhs:
            Literal:
              Int: 3
          rhs:
            Literal:
              Int: 4
- Expression:
    BinaryExp:
      operator: NotEq
      lhs:
        BinaryExp:
          operator: Lt
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 4
      rhs:
        BinaryExp:
          operator: Gt
          lhs:
            Literal:
              Int: 3
          rhs:
            Literal:
              Int: 4
- Expression:
    BinaryExp:
      operator: Eq
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 3
          rhs:
            BinaryExp:
              operator: Mul
              lhs:
                Literal:
                  Int: 4
              rhs:
                Literal:
                  Int: 5
      rhs:
        BinaryExp:
          operator: Add
          lhs:
            BinaryExp:
              operator: Mul
              lhs:
                Literal:
                  Int: 3
              rhs:
                Literal:
                  Int: 1
          rhs:
            BinaryExp:
              operator: Mul
              lhs:
                Literal:
                  Int: 4
              rhs:
                Literal:
                  Int: 5
- Expression:
    Literal: "True"
- Expression:
    Literal: "False"
- Expression:
    BinaryExp:
      operator: Eq
      lhs:
        BinaryExp:
          operator: Gt
          lhs:
            Literal:
              Int: 3
          rhs:
            Literal:
              Int: 5
      rhs:
        Literal: "False"
- Expression:
    BinaryExp:
      operator: Eq
      lhs:
        BinaryExp:
          operator: Lt
          lhs:
            Literal:
              Int: 3
          rhs:
            Literal:
              Int: 5
      rhs:
        Literal: "True"
- Expression:
    BinaryExp:
      operator: Add
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 1
          rhs:
            BinaryExp:
              operator: Add
              lhs:
                Literal:
                  Int: 2
              rhs:
                Literal:
                  Int: 3
      rhs:
        Literal:
          Int: 4
- Expression:
    BinaryExp:
      operator: Mul
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 5
      rhs:
        Literal:
          Int: 2
- Expression:
    BinaryExp:
      operator: Div
      lhs:
        Literal:
          Int: 2
      rhs:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 5
- Expression:
    BinaryExp:
      operator: Mul
      lhs:
        BinaryExp:
          operator: Mul
          lhs:
            BinaryExp:
              operator: Add
              lhs:
                Literal:
                  Int: 5
              rhs:
                Literal:
                  Int: 5
          rhs:
            Literal:
              Int: 2
      rhs:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 5
- Expression:
    UnaryExpression:
      value:
        BinaryExp:
          operator: Add
          lhs:
            Literal:
              Int: 5
          rhs:
            Literal:
              Int: 5
      operator: Oposite
- Expression:
    UnaryExpression:
      value:
        BinaryExp:
          operator: Eq
          lhs:
            Literal: "True"
          rhs:
            Literal: "True"
      operator: Not
- Expression:
    BinaryExp:
      operator: Add
      lhs:
        BinaryExp:
          operator: Add
          lhs:
            Identifier: a
          rhs:
            Call:
              arguments:
                - BinaryExp:
                    operator: Mul
                    lhs:
                      Identifier: b
                    rhs:
                      Identifier: c
              function:
                Identifier: add
      rhs:
        Identifier: d
- Expression:
    Call:
      arguments:
        - Identifier: a
        - Identifier: b
        - Literal:
            Int: 1
        - BinaryExp:
            operator: Mul
            lhs:
              Literal:
                Int: 2
            rhs:
              Literal:
                Int: 3
        - BinaryExp:
            operator: Add
            lhs:
              Literal:
                Int: 4
            rhs:
              Literal:
                Int: 5
        - Call:
            arguments:
              - Literal:
                  Int: 6
              - BinaryExp:
                  operator: Mul
                  lhs:
                    Literal:
                      Int: 7
                  rhs:
                    Literal:
                      Int: 8
            function:
              Identifier: add
      function:
        Identifier: add
- Expression:
    Call:
      arguments:
        - BinaryExp:
            operator: Add
            lhs:
              BinaryExp:
                operator: Add
                lhs:
                  BinaryExp:
                    operator: Add
                    lhs:
                      Identifier: a
                    rhs:
                      Identifier: b
                rhs:
                  BinaryExp:
                    operator: Div
                    lhs:
                      BinaryExp:
                        operator: Mul
                        lhs:
                          Identifier: c
                        rhs:
                          Identifier: d
                    rhs:
                      Identifier: f
            rhs:
              Identifier: g
      function:
        Identifier: add

